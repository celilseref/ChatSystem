declare const _default: import("@pipedream/types").Source<{
    emitEvent(data: any): void;
    _setLastTimestamp(timestamp: any): void;
    _getLastTimestamp(): any;
}, {
    mediatoolkit: import("@pipedream/types").App<{
        _accessToken(): any;
        _apiUrl(): "https://api.mediatoolkit.com";
        _makeRequest({ $, path, ...args }: {
            [x: string]: any;
            $?: any;
            path: any;
        }): Promise<any>;
        getOrganizations(args?: {}): Promise<any>;
        getGroups({ organizationId, ...args }: {
            [x: string]: any;
            organizationId: any;
        }): Promise<any>;
        getMentions({ organizationId, groupId, ...args }: {
            [x: string]: any;
            organizationId: any;
            groupId: any;
        }): Promise<any>;
    }, {
        organizationId: {
            label: string;
            description: string;
            type: string;
            options(): Promise<any>;
        };
        groupId: {
            label: string;
            description: string;
            type: string;
            options({ organizationId }: {
                organizationId: any;
            }): Promise<any>;
        };
    }>;
    db: string;
    timer: {
        type: string;
        static: {
            intervalSeconds: any;
        };
    };
    organizationId: {
        propDefinition: (string | import("@pipedream/types").App<{
            _accessToken(): any;
            _apiUrl(): "https://api.mediatoolkit.com";
            _makeRequest({ $, path, ...args }: {
                [x: string]: any;
                $?: any;
                path: any;
            }): Promise<any>;
            getOrganizations(args?: {}): Promise<any>;
            getGroups({ organizationId, ...args }: {
                [x: string]: any;
                organizationId: any;
            }): Promise<any>;
            getMentions({ organizationId, groupId, ...args }: {
                [x: string]: any;
                organizationId: any;
                groupId: any;
            }): Promise<any>;
        }, {
            organizationId: {
                label: string;
                description: string;
                type: string;
                options(): Promise<any>;
            };
            groupId: {
                label: string;
                description: string;
                type: string;
                options({ organizationId }: {
                    organizationId: any;
                }): Promise<any>;
            };
        }>)[];
    };
    groupId: {
        propDefinition: (string | import("@pipedream/types").App<{
            _accessToken(): any;
            _apiUrl(): "https://api.mediatoolkit.com";
            _makeRequest({ $, path, ...args }: {
                [x: string]: any;
                $?: any;
                path: any;
            }): Promise<any>;
            getOrganizations(args?: {}): Promise<any>;
            getGroups({ organizationId, ...args }: {
                [x: string]: any;
                organizationId: any;
            }): Promise<any>;
            getMentions({ organizationId, groupId, ...args }: {
                [x: string]: any;
                organizationId: any;
                groupId: any;
            }): Promise<any>;
        }, {
            organizationId: {
                label: string;
                description: string;
                type: string;
                options(): Promise<any>;
            };
            groupId: {
                label: string;
                description: string;
                type: string;
                options({ organizationId }: {
                    organizationId: any;
                }): Promise<any>;
            };
        }> | ((c: any) => {
            organizationId: any;
        }))[];
    };
}>;
export default _default;
